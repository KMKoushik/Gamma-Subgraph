// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class OToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OToken", id.toString(), this);
  }

  static load(id: string): OToken | null {
    return store.get("OToken", id) as OToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get strikeAsset(): Bytes {
    let value = this.get("strikeAsset");
    return value.toBytes();
  }

  set strikeAsset(value: Bytes) {
    this.set("strikeAsset", Value.fromBytes(value));
  }

  get underlyingAsset(): Bytes {
    let value = this.get("underlyingAsset");
    return value.toBytes();
  }

  set underlyingAsset(value: Bytes) {
    this.set("underlyingAsset", Value.fromBytes(value));
  }

  get collateralAsset(): Bytes {
    let value = this.get("collateralAsset");
    return value.toBytes();
  }

  set collateralAsset(value: Bytes) {
    this.set("collateralAsset", Value.fromBytes(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get strikePrice(): BigInt {
    let value = this.get("strikePrice");
    return value.toBigInt();
  }

  set strikePrice(value: BigInt) {
    this.set("strikePrice", Value.fromBigInt(value));
  }

  get expiryTimestamp(): BigInt {
    let value = this.get("expiryTimestamp");
    return value.toBigInt();
  }

  set expiryTimestamp(value: BigInt) {
    this.set("expiryTimestamp", Value.fromBigInt(value));
  }

  get isPut(): boolean {
    let value = this.get("isPut");
    return value.toBoolean();
  }

  set isPut(value: boolean) {
    this.set("isPut", Value.fromBoolean(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }
}
