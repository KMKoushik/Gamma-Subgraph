// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OtokenCreated extends ethereum.Event {
  get params(): OtokenCreated__Params {
    return new OtokenCreated__Params(this);
  }
}

export class OtokenCreated__Params {
  _event: OtokenCreated;

  constructor(event: OtokenCreated) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get underlying(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get strike(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get collateral(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get strikePrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get isPut(): boolean {
    return this._event.parameters[7].value.toBoolean();
  }
}

export class OtokenFactory extends ethereum.SmartContract {
  static bind(address: Address): OtokenFactory {
    return new OtokenFactory("OtokenFactory", address);
  }

  addressBook(): Address {
    let result = super.call("addressBook", "addressBook():(address)", []);

    return result[0].toAddress();
  }

  try_addressBook(): ethereum.CallResult<Address> {
    let result = super.tryCall("addressBook", "addressBook():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createOtoken(
    _underlyingAsset: Address,
    _strikeAsset: Address,
    _collateralAsset: Address,
    _strikePrice: BigInt,
    _expiry: BigInt,
    _isPut: boolean
  ): Address {
    let result = super.call(
      "createOtoken",
      "createOtoken(address,address,address,uint256,uint256,bool):(address)",
      [
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromAddress(_strikeAsset),
        ethereum.Value.fromAddress(_collateralAsset),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromBoolean(_isPut)
      ]
    );

    return result[0].toAddress();
  }

  try_createOtoken(
    _underlyingAsset: Address,
    _strikeAsset: Address,
    _collateralAsset: Address,
    _strikePrice: BigInt,
    _expiry: BigInt,
    _isPut: boolean
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createOtoken",
      "createOtoken(address,address,address,uint256,uint256,bool):(address)",
      [
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromAddress(_strikeAsset),
        ethereum.Value.fromAddress(_collateralAsset),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromBoolean(_isPut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOtoken(
    _underlyingAsset: Address,
    _strikeAsset: Address,
    _collateralAsset: Address,
    _strikePrice: BigInt,
    _expiry: BigInt,
    _isPut: boolean
  ): Address {
    let result = super.call(
      "getOtoken",
      "getOtoken(address,address,address,uint256,uint256,bool):(address)",
      [
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromAddress(_strikeAsset),
        ethereum.Value.fromAddress(_collateralAsset),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromBoolean(_isPut)
      ]
    );

    return result[0].toAddress();
  }

  try_getOtoken(
    _underlyingAsset: Address,
    _strikeAsset: Address,
    _collateralAsset: Address,
    _strikePrice: BigInt,
    _expiry: BigInt,
    _isPut: boolean
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOtoken",
      "getOtoken(address,address,address,uint256,uint256,bool):(address)",
      [
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromAddress(_strikeAsset),
        ethereum.Value.fromAddress(_collateralAsset),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromBoolean(_isPut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOtokensLength(): BigInt {
    let result = super.call(
      "getOtokensLength",
      "getOtokensLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getOtokensLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOtokensLength",
      "getOtokensLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTargetOtokenAddress(
    _underlyingAsset: Address,
    _strikeAsset: Address,
    _collateralAsset: Address,
    _strikePrice: BigInt,
    _expiry: BigInt,
    _isPut: boolean
  ): Address {
    let result = super.call(
      "getTargetOtokenAddress",
      "getTargetOtokenAddress(address,address,address,uint256,uint256,bool):(address)",
      [
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromAddress(_strikeAsset),
        ethereum.Value.fromAddress(_collateralAsset),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromBoolean(_isPut)
      ]
    );

    return result[0].toAddress();
  }

  try_getTargetOtokenAddress(
    _underlyingAsset: Address,
    _strikeAsset: Address,
    _collateralAsset: Address,
    _strikePrice: BigInt,
    _expiry: BigInt,
    _isPut: boolean
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTargetOtokenAddress",
      "getTargetOtokenAddress(address,address,address,uint256,uint256,bool):(address)",
      [
        ethereum.Value.fromAddress(_underlyingAsset),
        ethereum.Value.fromAddress(_strikeAsset),
        ethereum.Value.fromAddress(_collateralAsset),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromBoolean(_isPut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  otokens(param0: BigInt): Address {
    let result = super.call("otokens", "otokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_otokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("otokens", "otokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _addressBook(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateOtokenCall extends ethereum.Call {
  get inputs(): CreateOtokenCall__Inputs {
    return new CreateOtokenCall__Inputs(this);
  }

  get outputs(): CreateOtokenCall__Outputs {
    return new CreateOtokenCall__Outputs(this);
  }
}

export class CreateOtokenCall__Inputs {
  _call: CreateOtokenCall;

  constructor(call: CreateOtokenCall) {
    this._call = call;
  }

  get _underlyingAsset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _strikeAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _collateralAsset(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _strikePrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _isPut(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class CreateOtokenCall__Outputs {
  _call: CreateOtokenCall;

  constructor(call: CreateOtokenCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
