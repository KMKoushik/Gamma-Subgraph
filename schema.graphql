type ERC20 @entity {
  id: ID!
  symbol: String!
  name: String!
}

type OToken @entity {
  id: ID!
  name: String!
  symbol: String!
  strikeAsset: ERC20! # address
  underlyingAsset: ERC20! # address
  collateralAsset: ERC20! # address
  creator: Bytes! # address
  
  strikePrice: BigInt!
  expiryTimestamp: BigInt!
  isPut: Boolean!

  createdAt: BigInt!
  createdTx: Bytes!

  totalSupply: BigInt!
}

type Account @entity {
  id: ID!

  "Amount of vaults this account has"
  vaultCount: BigInt!

  "Array of all vaults"
  vaults: [Vault]! @derivedFrom(field: "owner")

  "Amount of operators"
  operatorCount: BigInt!

  "Array of operator this account has"
  operators: [AccountOperator!] @derivedFrom(field: "account")
}

type Operator @entity {
  id: ID!

  "Amount of account this operator is controlling"
  accountCount: BigInt!

  "Array of accounts this operator is controlling"
  accounts: [AccountOperator]! @derivedFrom(field: "operator")
}

# For manage many-to-many relationship between operators and accounts
type AccountOperator @entity {
  " Equals to ${account}-${operator}`"
  id: ID!
  account: Account
  operator: Operator
}

type Vault @entity {
  "Equals to <owner>-<vaultId>"
  id: ID!

  owner: Account! # address
  vaultId: BigInt!

  shortOToken: OToken # address
  longOToken: OToken # address
  collateralAsset: ERC20 # address
  
  shortAmount: BigInt
  longAmount: BigInt
  collateralAmount: BigInt
}

#
# Vault Events
#
interface VaultAction {
  " Equals to: <actionType>-<transactionHash>-<logId>"
  id: ID!
  " Transaction sender, either account or operator"
  messageSender: Bytes!
  " The vault that this action operates on"
  vault: Vault!
  " Block number "
  block: BigInt!
  " Transaction hash (tx) "
  transactionHash: Bytes!
  " Timestamp as seconds (time) "
  timestamp: BigInt!
}

type OpenVaultAction implements VaultAction @entity {
    # Vault fields
  id: ID!
  messageSender: Bytes!
  vault: Vault!
  block: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
}

type DepositCollateralAction implements VaultAction @entity {
  # Vault fields
  id: ID!
  messageSender: Bytes!
  vault: Vault!
  block: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
  
  # Specific field
  " Collateral sender, either account or operator"
  from: Bytes!
  " Collateral Asset"
  asset: ERC20!
  " Amount added in the vault"
  amount: BigInt!
}

type WithdrawCollateralAction implements VaultAction @entity {
    # Vault fields
  id: ID!
  messageSender: Bytes!
  vault: Vault!
  block: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
  
  " Collateral sender, either account or operator"
  to: Bytes!
  " Collateral Asset"
  asset: ERC20!
  " Amount added in the vault"
  amount: BigInt!
}

type DepositLongAction implements VaultAction @entity {
  # Vault fields
  id: ID!
  messageSender: Bytes!
  vault: Vault!
  block: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
  
  # Specific field
  " oToken sender, either account or operator"
  from: Bytes!
  " oToken Asset"
  oToken: OToken!
  " oToken added in the vault"
  amount: BigInt!
}

type WithdrawLongAction implements VaultAction @entity {
    # Vault fields
  id: ID!
  messageSender: Bytes!
  vault: Vault!
  block: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
  
  " Long oToken sender, either account or operator"
  to: Bytes!
  " Long oToken Asset"
  oToken: OToken!
  " Amount added in the vault"
  amount: BigInt!
}

type BurnShortAction implements VaultAction @entity {
  # Vault fields
  id: ID!
  messageSender: Bytes!
  vault: Vault!
  block: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
  
  # Specific field
  " oToken holder, either account or operator"
  from: Bytes!
  " oToken Asset"
  oToken: OToken!
  " Amount added in the vault"
  amount: BigInt!
}

type MintShortAction implements VaultAction @entity {
    # Vault fields
  id: ID!
  messageSender: Bytes!
  vault: Vault!
  block: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
  
  " Create oToken to"
  to: Bytes!
  " OToken asset"
  oToken: OToken!
  " Amount added in the vault"
  amount: BigInt!
}

type WhitelistedProduct @entity {
  id: ID!
  underlying: ERC20!
  strike: ERC20!
  collateral: ERC20!
  isPut: Boolean!
  isWhitelisted: Boolean!  
}