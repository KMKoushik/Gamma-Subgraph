type OToken @entity {
  id: ID!
  strikeAsset: Bytes! # address
  underlyingAsset: Bytes! # address
  collateralAsset: Bytes! # address
  creator: Bytes! # address
  
  strikePrice: BigInt!
  expiryTimestamp: BigInt!
  isPut: Boolean!

  createdAt: BigInt!
  createdTx: Bytes!

  totalSupply: BigInt!
}

type Account @entity {
  id: ID!

  "Amount of vaults this account has"
  vaultCount: BigInt!

  "Array of all vaults"
  vaults: [Vault]! @derivedFrom(field: "owner")

  "Amount of operators"
  operatorCount: BigInt!

  "Array of operator this account has"
  operators: [AccountOperator!] @derivedFrom(field: "account")
}

type Operator @entity {
  id: ID!

  "Amount of account this operator is controlling"
  accountCount: BigInt!

  "Array of accounts this operator is controlling"
  accounts: [AccountOperator]! @derivedFrom(field: "operator")
}

# For manage many-to-many relationship between operators and accounts
type AccountOperator @entity {
  " Equals to ${account}-${operator}`"
  id: ID!
  account: Account
  operator: Operator
}

type Vault @entity {
  "Equals to <owner>-<vaultId>"
  id: ID!

  owner: Account! # address
  vaultId: BigInt!

  shortOTokens: OToken # address
  longOTokens: OToken # address
  collateralAssets: Bytes # address
  
  shortAmounts: BigInt
  longAmounts: BigInt
  collateralAmounts: BigInt
}

#
# Vault Events
#
interface VaultAction {
  " Equals to: <actionType>-<transactionHash>-<logId>"
  id: ID!
  " Transaction sender, either account or operator"
  from: Bytes!
  " The vault that this action operates on"
  vault: Vault!
  " Block number "
  block: BigInt!
  " Transaction hash (tx) "
  transactionHash: Bytes!
  " Timestamp as seconds (time) "
  timestamp: BigInt!
}

type DepositCollateralAction implements VaultAction @entity {
  " Equals to: <actionType>-<transactionHash>-<logId>"
  id: ID!
  " Transaction sender, either account or operator"
  from: Bytes!
  " The vault that this action operates on"
  vault: Vault!
  " Block number "
  block: BigInt!
  " Transaction hash (tx) "
  transactionHash: Bytes!
  " Timestamp as seconds (time) "
  timestamp: BigInt!
  " Collateral Asset"
  asset: Bytes!
  " Amount added in the vault"
  amount: BigInt!
}